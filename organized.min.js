const angInc=.015;let input,angle=0,circleButtonIsOn=!1,circlingBallButtonIsOn=!1,makeCircleButtonIsOn=!1,midPointButtonIsOn=!1,ballsButtonIsOn=!1,sinGraphButtonIsOn=!1,cosGraphButtonIsOn=!1,vertCosGraphButtonIsOn=!1,showDerivativeButtonIsOn=!1,stop=!1,xPoints=[],yPoints=[];function setup(){createCanvas(windowWidth,windowHeight).parent("can-container");makeButton("Stop","stopButton",(()=>{stop=!stop})),makeButton("Circle","circleButton",(()=>{circleButtonIsOn=!circleButtonIsOn})),makeButton("Circling Ball","circlingBallButton",(()=>{circlingBallButtonIsOn=!circlingBallButtonIsOn})),makeButton("make circle","makeCircleButton",(()=>{makeCircleButtonIsOn=!makeCircleButtonIsOn})),makeButton("show mid","midPointButton",(()=>{midPointButtonIsOn=!midPointButtonIsOn})),makeButton("Balls","ballsButton",(()=>{ballsButtonIsOn=!ballsButtonIsOn})),makeButton("sin Graph","sinGraphButton",(()=>{sinGraphButtonIsOn=!sinGraphButtonIsOn})),makeButton("cos Graph","cosGraphButton",(()=>{cosGraphButtonIsOn=!cosGraphButtonIsOn})),makeButton("vertcal cos","vertCosGraphButton",(()=>{vertCosGraphButtonIsOn=!vertCosGraphButtonIsOn})),makeButton("derivative","showDerivativeButton",(()=>{showDerivativeButtonIsOn=!showDerivativeButtonIsOn}));input=makeinputBox("0","#input")}function draw(){clear(),translate(width/2,height/2);const t=width/6,e=t/8,n=t*cos(angle),o=t*sin(angle);xPoints.unshift(n),yPoints.unshift(o),circleButtonIsOn?showCircle(t):styleWhenButtonOff("#circleButton"),circlingBallButtonIsOn?showCirclingBall(n,o,e):styleWhenButtonOff("#circlingBallButton"),makeCircleButtonIsOn?makeCircle(n,o,xPoints,yPoints,t):(noStroke(),fill("blue"),ellipse(n,0,e),fill("red"),ellipse(0,o,e),styleWhenButtonOff("#makeCircleButton")),midPointButtonIsOn?showMidPoint(n,o,xPoints,yPoints,t):styleWhenButtonOff("#midPointButton"),ballsButtonIsOn?showBalls(t,angle,3,e):styleWhenButtonOff("#ballsButton"),sinGraphButtonIsOn?showSinGraph(yPoints):styleWhenButtonOff("#sinGraphButton"),cosGraphButtonIsOn?showCosGraph(n,xPoints):styleWhenButtonOff("#cosGraphButton"),vertCosGraphButtonIsOn?showCosVert(xPoints):styleWhenButtonOff("#vertCosGraphButton"),showDerivativeButtonIsOn?derivative(n,o,t):styleWhenButtonOff("#showDerivativeButton"),inputAngle=radians(float(-1*input.value())),stop?(angle=inputAngle,styleWhenButtonOn("#stopButton")):(angle-=.015,styleWhenButtonOff("#stopButton"))}const discribeText=t=>{select("#discription").html(t)},styleWhenButtonOn=t=>{select(t).style("color","white").style("background-color","black")},styleWhenButtonOff=t=>{select(t).style("color","var(--carrot)").style("background-color","var(--transparent)")},makeButton=(t,e,n)=>createButton(t).addClass("mybutton").id(e).parent("button_container").mousePressed(n),makeinputBox=(t,e)=>createInput(t).addClass("mybutton").id(e).parent("button_container");function windowResized(){resizeCanvas(windowWidth,windowHeight),radius=width/6,ballRadius=radius/8}const showCircle=t=>{noFill(),strokeWeight(2.5),stroke("white"),ellipse(0,0,2*t),stroke("blue"),line(-t,0,t,0),stroke("red"),line(0,-t,0,t),s="they look like they are moving in a stright lines <br> press the button <em>Ball</em> to see next",discribeText(s),styleWhenButtonOn("#circleButton")},showCirclingBall=(t,e,n)=>{noStroke(),fill("orange"),ellipse(t,e,n,n),strokeWeight(4),stroke(24),line(0,0,t,e),line(t,e,0,e),line(t,e,t,0),s="but really they are drawn as the <em> vertival</em> and <em>horizontal</em> motion of circular moving ball",discribeText(s),styleWhenButtonOn("#circlingBallButton")},makeCircle=(t,e,n,o,l)=>{stroke(180),strokeWeight(2),line(0,l,2*l,l),line(0,l,0,-l),noStroke(),fill("red"),ellipse(0,e,l/10),fill("blue"),ellipse(t+l,l,l/10),stroke("red"),line(0,e,t+l,e),stroke("blue"),line(t+l,e,t+l,l),beginShape(),stroke("yellow"),noFill(),n.forEach(((t,e)=>vertex(t+l,o[e]))),endShape(),n.length>100&&n.pop(),o.length>100&&o.pop(),discribeText("Did you know you can make circles out of objects moving in a straight line <br> <em>Archimedes</em> knew that"),styleWhenButtonOn("#makeCircleButton")},showMidPoint=(t,e,n,o,l)=>{stroke("white"),strokeWeight(2),noFill(),line(t,0,0,e),o.length>200&&o.pop(),n.length>200&&n.pop(),beginShape();for(let t=0;t<n.length;t+=10)circle(n[t]/2,o[t]/2,l/30);endShape(),stroke("black"),line(0,0,t/2,e/2);discribeText("so if you see the mid point between the balls that also makes a circle"),styleWhenButtonOn("#midPointButton")},showBalls=(t,e,n,o)=>{stroke("white"),strokeWeight(1),noFill(),ellipse(0,0,2*t);const l=360/n;for(let n=0;n<360;n+=l){push(),angleMode(DEGREES),rotate(n);const l=t*cos(degrees(e)-n),s=t*sin(degrees(e)-n);let i=map(n,0,360,0,255);colorMode(HSB,255),strokeWeight(2),fill(i,255,200),stroke(i,255,200),line(-t,0,t,0),line(0,-t,0,t),ellipse(l,0,o),ellipse(0,s,o),pop()}angleMode(RADIANS),styleWhenButtonOn("#ballsButton"),s="the original balls only track the <em> vertical </em> and <em>horizontal</em> but if we track in diffrent directions it gives this",discribeText(s)},showSinGraph=t=>{beginShape();let e=0;noFill(),stroke("red"),strokeWeight(2);for(let n=0;n<t.length;n+=10)vertex(e,t[n]),e+=10;endShape(),t.length>600&&t.pop(),styleWhenButtonOn("#sinGraphButton")},showCosGraph=(t,e)=>{beginShape();let n=0;noFill(),stroke("blue"),strokeWeight(2);for(let t=0;t<e.length;t+=10)vertex(n,e[t]),n+=10;endShape(),stroke("white"),line(t,0,0,e[0]),e.length>600&&e.pop(),styleWhenButtonOn("#cosGraphButton")},showCosVert=t=>{beginShape();let e=0;noFill(),stroke("blue"),strokeWeight(2);for(let n=0;n<t.length;n+=10)vertex(t[n],e),e+=10;endShape(),t.length>600&&t.pop(),styleWhenButtonOn("#vertCosGraphButton")},derivative=(t,e,n)=>{strokeWeight(2.5),stroke(255),noFill(),ellipse(0,0,2*n),push(),translate(t,e),stroke("blue"),line(-n,0,n,0),stroke("red"),line(0,-n,0,n),stroke("yellow"),rotate(angle),line(0,-n,0,n),pop(),styleWhenButtonOn("#showDerivativeButton")};
