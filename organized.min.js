const angInc=.01;let input,angle=0,circleButtonIsOn=!1,circlingBallButtonIsOn=!1,makeCircleButtonIsOn=!1,midPointButtonIsOn=!1,ballsButtonIsOn=!1,sinGraphButtonIsOn=!1,cosGraphButtonIsOn=!1,vertCosGraphButtonIsOn=!1,showDerivativeButtonIsOn=!1,isevenButtonIsOn=!1,isAllTrigButtonOn=!1,stop=!1,xPoints=[],yPoints=[];function setup(){createCanvas(windowWidth,windowHeight).parent("can-container");makeButton("Circle","circleButton",(()=>{circleButtonIsOn=!circleButtonIsOn})),makeButton("Circling Ball","circlingBallButton",(()=>{circlingBallButtonIsOn=!circlingBallButtonIsOn})),makeButton("make circle","makeCircleButton",(()=>{makeCircleButtonIsOn=!makeCircleButtonIsOn})),makeButton("show mid","midPointButton",(()=>{midPointButtonIsOn=!midPointButtonIsOn})),makeButton("Balls","ballsButton",(()=>{ballsButtonIsOn=!ballsButtonIsOn})),makeButton("sin Graph","sinGraphButton",(()=>{sinGraphButtonIsOn=!sinGraphButtonIsOn})),makeButton("cos Graph","cosGraphButton",(()=>{cosGraphButtonIsOn=!cosGraphButtonIsOn})),makeButton("vertcal cos","vertCosGraphButton",(()=>{vertCosGraphButtonIsOn=!vertCosGraphButtonIsOn})),makeButton("derivative","showDerivativeButton",(()=>{showDerivativeButtonIsOn=!showDerivativeButtonIsOn})),makeButton("Who is even","isEven",(()=>{isevenButtonIsOn=!isevenButtonIsOn})),makeButton("show All trig","allTrig",(()=>{isAllTrigButtonOn=!isAllTrigButtonOn})),makeButton("Stop","stopButton",(()=>{stop=!stop}));input=makeinputBox("45","#input")}function draw(){clear(),translate(width/2,height/2);const t=width/6,e=t/8,n=t*cos(angle),o=t*sin(angle);xPoints.unshift(n),yPoints.unshift(o),circleButtonIsOn?showCircle(t):styleWhenButtonOff("#circleButton"),circlingBallButtonIsOn?showCirclingBall(n,o,e):styleWhenButtonOff("#circlingBallButton"),makeCircleButtonIsOn?makeCircle(n,o,xPoints,yPoints,t):(noStroke(),fill("blue"),ellipse(n,0,e),fill("red"),ellipse(0,o,e),styleWhenButtonOff("#makeCircleButton"),xPoints.length>300&&xPoints.pop(),yPoints.length>300&&yPoints.pop()),midPointButtonIsOn?showMidPoint(n,o,xPoints,yPoints,t):styleWhenButtonOff("#midPointButton"),ballsButtonIsOn?showBalls(t,angle,3,e):styleWhenButtonOff("#ballsButton"),sinGraphButtonIsOn?showSinGraph(yPoints):styleWhenButtonOff("#sinGraphButton"),cosGraphButtonIsOn?showCosGraph(n,xPoints):styleWhenButtonOff("#cosGraphButton"),vertCosGraphButtonIsOn?showCosVert(xPoints):styleWhenButtonOff("#vertCosGraphButton"),showDerivativeButtonIsOn?derivative(n,o,t):styleWhenButtonOff("#showDerivativeButton"),isevenButtonIsOn?isEven(n,o,angle,t,e):styleWhenButtonOff("#isEven"),isAllTrigButtonOn?allTrig(n,o,e):styleWhenButtonOff("#allTrig"),inputAngle=radians(float(-1*input.value())),stop?(angle=inputAngle,styleWhenButtonOn("#stopButton")):(angle-=.01,styleWhenButtonOff("#stopButton"))}const discribeText=t=>{select("#discription").html(t)},styleWhenButtonOn=t=>{select(t).style("color","white").style("background-color","black")},styleWhenButtonOff=t=>{select(t).style("color","var(--carrot)").style("background-color","var(--transparent)")},makeButton=(t,e,n)=>createButton(t).addClass("mybutton").id(e).parent("button_container").mousePressed(n),makeinputBox=(t,e)=>createInput(t).addClass("mybutton").id(e).parent("button_container");function windowResized(){resizeCanvas(windowWidth,windowHeight),radius=width/6,ballRadius=radius/8}const showCircle=t=>{noFill(),strokeWeight(2.5),stroke("white"),ellipse(0,0,2*t),stroke("blue"),line(-t,0,t,0),stroke("red"),line(0,-t,0,t),s="they look like they are moving in a stright lines <br> press the button <em>Ball</em> to see next",discribeText(s),styleWhenButtonOn("#circleButton")},showCirclingBall=(t,e,n)=>{noStroke(),fill("orange"),ellipse(t,e,n,n),strokeWeight(4),stroke(24),line(0,0,t,e),line(t,e,0,e),line(t,e,t,0),noFill(),stroke("white"),strokeWeight(2),arc(0,0,100,100,angle,0);let o=round(degrees(-1*angle));for(;o<0||o>360;)o<0&&(o+=360),o>360&&(o-=360);textSize(25),text(o,50*cos(radians(-1*o/2)),50*sin(radians(-1*o/2))),s="but really they are drawn as the <em> vertival</em> and <em>horizontal</em> motion of circular moving ball",discribeText(s),styleWhenButtonOn("#circlingBallButton")},makeCircle=(t,e,n,o,i)=>{stroke(180),strokeWeight(2),line(0,i,2*i,i),line(0,i,0,-i),noStroke(),fill("red"),ellipse(0,e,i/10),fill("blue"),ellipse(t+i,i,i/10),stroke("red"),line(0,e,t+i,e),stroke("blue"),line(t+i,e,t+i,i),beginShape(),stroke("yellow"),noFill(),n.forEach(((t,e)=>vertex(t+i,o[e]))),endShape(),o.length>100&&o.pop(),n.length>100&&n.pop(),discribeText("Did you know you can make circles out of objects moving in a straight line <br> <em>Archimedes</em> knew that"),styleWhenButtonOn("#makeCircleButton")},showMidPoint=(t,e,n,o,i)=>{stroke("white"),strokeWeight(2),noFill(),line(t,0,0,e),beginShape();for(let t=0;t<n.length;t+=10)circle(n[t]/2,o[t]/2,i/30);endShape(),stroke("black"),line(0,0,t/2,e/2);discribeText("so if you see the mid point between the balls that also makes a circle"),styleWhenButtonOn("#midPointButton")},showBalls=(t,e,n,o)=>{stroke("white"),strokeWeight(1),noFill(),ellipse(0,0,2*t);const i=360/n;for(let n=0;n<360;n+=i){push(),angleMode(DEGREES),rotate(n);const i=t*cos(degrees(e)-n),s=t*sin(degrees(e)-n);let l=map(n,0,360,0,255);colorMode(HSB,255),strokeWeight(2),fill(l,255,200),stroke(l,255,200),line(-t,0,t,0),line(0,-t,0,t),ellipse(i,0,o),ellipse(0,s,o),pop()}angleMode(RADIANS),styleWhenButtonOn("#ballsButton"),s="the original balls only track the <em> vertical </em> and <em>horizontal</em> but if we track in diffrent directions it gives this",discribeText(s)},showSinGraph=t=>{beginShape();let e=0;noFill(),stroke("red"),strokeWeight(2);for(let n=0;n<t.length;n+=10)vertex(e,t[n]),e+=10;if(endShape(),isevenButtonIsOn){beginShape();let e=0;for(let n=0;n<t.length;n+=10)vertex(e,-t[n]),e+=10;endShape()}discribeText("if we track the vertical ball in time it we draw a <em>sin Graph</em>"),styleWhenButtonOn("#sinGraphButton")},showCosGraph=(t,e)=>{beginShape();let n=0;noFill(),stroke("blue"),strokeWeight(2);for(let t=0;t<e.length;t+=10)vertex(n,e[t]),n+=10;endShape(),stroke("white"),line(t,0,0,e[0]),discribeText("if we track the Horizontal ball in time it we draw a <em>cos Graph</em>"),styleWhenButtonOn("#cosGraphButton")},showCosVert=t=>{beginShape();let e=0;noFill(),stroke("blue"),strokeWeight(2);for(let n=0;n<t.length;n+=10)vertex(t[n],e),e+=10;endShape(),t.length>600&&t.pop(),styleWhenButtonOn("#vertCosGraphButton")},derivative=(t,e,n)=>{strokeWeight(2.5),stroke(255),noFill(),ellipse(0,0,2*n),push(),translate(t,e),stroke("blue"),line(-n,0,n,0),stroke("red"),line(0,-n,0,n),stroke("yellow"),rotate(angle),line(0,-n,0,n),pop(),discribeText("As we all know derivative is the <em>slope(tangent)</em> of the graph in this animation we can see that if we draw vertical and horizontal lines from the tanget we can easily see that the ball moving horizontally in the center now it's moving vertically in the tangent and vice versa this means <em>cos derivative is -sin(inverted sin)</em> and sin's derivative is cos"),styleWhenButtonOn("#showDerivativeButton")},isEven=(t,e,n,o,i)=>{const s=-n;noFill(),strokeWeight(5),stroke("green"),ballPositive=ellipse(t,e,i),strokeWeight(2),line(0,0,t,e);const l=o*cos(s),r=o*sin(s);stroke("yellow"),line(0,0,l,r),strokeWeight(5),ballNegetive=ellipse(l,r,i),noStroke(),fill("cyan"),ballvertNegetive=ellipse(0,r,i),noFill(),strokeWeight(2),stroke("green"),arc(0,0,100,100,n,0);let a=round(degrees(-1*n));for(;a<0||a>360;)a<0&&(a+=360),a>360&&(a-=360);textSize(25),text(a,50*cos(radians(-1*a/2)),50*sin(radians(-1*a/2))),stroke("yellow"),arc(0,0,75,75,0,s);let h=round(degrees(-1*s));for(;h>0||h<-360;)h>0&&(h-=360),h<-360&&(h+=360);textSize(25),text(h,50*cos(radians(-1*h/2)),50*sin(radians(-1*h/2))),discribeText("Which one looks even. <br> Even function is when f(x)=f(-x) <em>when we invert the input it still looks</em> the same the horizontal ball is the same for both negetive angle and positive so it's even function"),styleWhenButtonOn("#isEven")},allTrig=(t,e,n)=>{strokeWeight(3),textSize(n),stroke("blue"),line(t,e,(e*e+t*t)/t,0),fill(0),text("tan",(t+(e*e+t*t)/t)/2,e/2),stroke("red"),line(0,-t*-t/e+e,t,e),text("cot",t/2,(-t*-t/e+e+e)/2),stroke("orange"),line(0,0,0,-t*-t/e+e),text("csc",0,(-t*-t/e+e)/2),stroke("green"),line(0,0,(e*e+t*t)/t,0),text("sec",(e*e+t*t)/t/2,0),stroke("red"),line(t,e,t,0),text("sin",t,e/2),stroke("blue"),line(t,e,0,e),text("cos",t/2,e),styleWhenButtonOn("#allTrig")};
